version: 2.1

###
### Define Orbs
### ---------------------------------------------------------------------------------------------
###

orbs:
  node: circleci/node@2.0.1
  slack: circleci/slack@3.2.0
  jq: circleci/jq@2.0.1
  coveralls: coveralls/coveralls@1.0.6
  rn: react-native-community/react-native@2.0.1

###
### Define executors:
###
### Node image for React Native & Pods [Ruby based] and Gems from Bundler
### osx for iOS related
### ---------------------------------------------------------------------------------------------
###

executors:
  # Node with Ruby (Install node modules / gems / pods)
  node:
    docker:
      - image: circleci/ruby:latest-node
        environment:
          API_URL: $API_URL
          AMPLITUDE_KEY: $AMPLITUDE_KEY
    resource_class: large

  # Xcode / iOS builds
  mobile-build-box:
    macos:
      xcode: 12.4.0

###
### Define references:
###
### Cache keys for various dependencies
### branch filters for [master, stage, legacy-ota, feature]
### ---------------------------------------------------------------------------------------------
###

references:
  default_workspace: &default_workspace ~/covid-react

  # Cache keys
  yarn_cache_key: &yarn_cache_key yarn-v6-{{ checksum "yarn.lock" }}-{{ arch }}
  node_cache_key: &node_cache_key node-v6-{{ checksum "package.json" }}-{{ arch }}
  pod_cache_key: &pod_cache_key pod-v6-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
  gem_cache_key: &gem_cache_key gems-v6-{{ checksum "Gemfile.lock" }}-{{ arch }}

  # Branch filter
  master_filter: &master_filter
    branches:
      only: master

  develop_filter: &develop_filter
    branches:
      only:
        - develop

  feature_filter: &feature_filter
    branches:
      ignore:
        - master
        - develop
        - develop-legacy
        - release-0.x-legacy
        - stage
  
  e2e_filter: &e2e_filter
    branches:
      only:
        - develop

###
### Define shared commands:
### ---------------------------------------------------------------------------------------------
###

commands:
  # Checks out code & restore cache for deps
  prepare_code:
    steps:
      - checkout
      - run: bash .circleci/pull_private_assets.sh

  install-dependencies:
    steps:
      - bundler-install
      - node-install

  bundler-install:
    steps:
      - restore_cache:
          key: *gem_cache_key
      - run: gem install bundler
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle --clean
          environment:
            BUNDLE_JOBS: "4"
            BUNDLE_RETRY: "3"
      - run: bundle update fastlane
      - save_cache:
          key: *gem_cache_key
          paths:
            - vendor/bundle

  node-install:
    steps:
      - restore_cache:
          key: *yarn_cache_key
      - restore_cache:
          key: *node_cache_key
      - restore_cache:
          key: *pod_cache_key
      - run: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          key: *yarn_cache_key
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: *node_cache_key
          paths:
            - node_modules
      - save_cache:
          key: *pod_cache_key
          paths:
            - ios/Pods
            - ~/Library/Caches/CocoaPods/Pods

  # Prepare blank env for testing
  prepare_blank_env:
    steps:
      - run: echo "API_URL=" > .env
      - run: echo "AMPLITUDE_KEY=" >> .env

  prepare_deploy_env:
    steps:
      - run: bash .circleci/make_deploy_env.sh

  # Should prepare code, install deps & bundle assets
  build:
    steps:
      - prepare_code
      - install-dependencies
      - run: yarn metro-empty-cache
      - run:
          name: "Bundle RN Android assets"
          command: npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res
      - run:
          name: "Clean up after bundling"
          command: rm -rf ./android/app/src/main/res/drawable-* && rm -rf ./android/app/src/main/res/raw

  # OTA
  set_expo_release_channel:
    steps:
      - run:
          name: Set expo release channel
          command: |
            echo "export RELEASE_CHANNEL=$(grep EXPO_RELEASE_CHANNEL .env | cut -d '=' -f2)" >> $BASH_ENV

  # Publish OTA releases through Expo
  expo_ota_publish:
    steps:
      - set_expo_release_channel
      - run: npx expo-cli login -u $EXPO_USERNAME -p $EXPO_PASSWORD
      - run: npx expo-cli publish --non-interactive --max-workers 1 --release-channel ${RELEASE_CHANNEL} --target bare
  
  # Prepare E2E setup
  prepare_e2e:
    steps:
      - run: brew update
      - run: brew install watchman
      - run: npm install -g detox-cli
      - run: brew tap wix/brew
      - run: brew install applesimutils

###
### Define jobs
### ---------------------------------------------------------------------------------------------
###

jobs:
  # Prepare code, install dependencies (node & ios & ruby), build android assets
  # Save dependencies & bundled assets in workspace
  build:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - build
      - persist_to_workspace:
          root: *default_workspace
          paths:
            - node_modules
            - vendor/bundle
            - ios/Pods
            - android/app/src/main/assets/index.android.bundle
            - android/app/src/main/res

  # Prepare code and run lint
  lint:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - node-install
      - run:
          command: |
            mkdir -p ~/reports
            yarn lint:ci
          when: always
      - run: yarn prettier
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  # Prepare code and check i18n
  i18n:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - node-install
      - run: yarn test:i18n 'sv-SE'
      - run: yarn test:i18n 'es'

  # Prepare code and run tests
  test:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - prepare_blank_env
      - node-install
      - run:
          name: Run tests with JUnit as reporter
          command: yarn test:coverage
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - coveralls/upload
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  
  # Run Dtox E2E
  e2etest:
    executor: mobile-build-box
    working_directory: ~/covid-react

    steps:
      - build
      - prepare_e2e
      #- run: yarn build:ios
      - run:
          name: Force specific nodejs version
          command: |
            export NODE_VERSION=$(cat .nvmrc)
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.35.1/install.sh | bash -s -- --no-use
            echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
            echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            echo 'nvm install v10.2.0' >> $BASH_ENV
            echo 'nvm alias default v10.2.0' >> $BASH_ENV

      - run: yarn fastlane:ios:release env:$RELEASE_TYPE
      #- run: detox build --configuration ios.release
      - run: detox test --configuration ios.release --cleanup
      - persist_to_workspace:
          root: *default_workspace
          paths:
            - node_modules
            - vendor/bundle
            - ios/Pods
            - android/app/src/main/assets/index.android.bundle
            - android/app/src/main/res

  ### ------------------- ###
  ### Deploy related jobs ###
  ### ------------------- ###

  # Uses osx & xcode to build iOS project
  deploy-ios:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - prepare_code
      - run: yarn
      - attach_workspace:
          at: *default_workspace
      - prepare_deploy_env
      - run: bundle install --path vendor/bundle --clean
      - run: yarn fastlane:ios:release env:$RELEASE_TYPE
      - store_artifacts:
          path: ~/covid-react/build

  # Uses android-api docker image to build android app
  deploy-android:
    working_directory: *default_workspace
    docker:
      - image: circleci/android:api-29-node
    environment:
      JAVA_OPTS: "-Xms512m -Xmx2g"
      GRADLE_OPTS: '-Xmx3g -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"'
    steps:
      - checkout:
          path: *default_workspace
      - attach_workspace:
          at: *default_workspace
      - run: bash .circleci/pull_private_assets.sh
      - prepare_deploy_env
      - restore_cache:
          key: *gem_cache_key
      - run: bundle install --path vendor/bundle --clean && cat android/gradle.properties
      - run:
          name: fastlane android release
          no_output_timeout: 60m
          command: |
            ENVFILE=.env bundle exec fastlane android release env:$RELEASE_TYPE
      - store_artifacts:
          path: ~/covid-react/android/app/build/outputs

  ### ------------------- ###
  ###  OTA related jobs   ###
  ### ------------------- ###

  ota-release:
    executor: mobile-build-box
    working_directory: ~/covid-react
    steps:
      - build
      - prepare_deploy_env
      - expo_ota_publish


  ### ------------------- ###
  ### Slack related jobs  ###
  ### ------------------- ###

  deployed-stage:
    executor: mobile-build-box
    steps:
      - slack/notify:
          message: Deployed adhoc builds for iOS & Android
          webhook: $SLACK_WEBHOOK

  deployed-prod:
    executor: mobile-build-box
    steps:
      - slack/notify:
          message: Deployed release builds for iOS & Android
          webhook: $SLACK_WEBHOOK

  deployed-ota:
    executor: mobile-build-box
    steps:
      - set_expo_release_channel
      - slack/notify:
          message: "Deployed OTA release for iOS & Android $RELEASE_CHANNEL"
          webhook: $SLACK_WEBHOOK

###
### Define workflow
### ---------------------------------------------------------------------------------------------
###

workflows:

  #
  # Branch (Ignoring) [master, develop, stage, release-0.x-legacy]
  # - Build app assets
  # |-- Lint project
  # |-- Check i18n string
  # |-- Run Tests
  # |-- Run Detox E2E Tests
  #

  tests:
    jobs:
      - lint:
          filters: *feature_filter
      - i18n:
          filters: *feature_filter
      - test:
          filters: *feature_filter

      # DISABLED FOR MERGE TO MASTER
      # - e2etest:
      #     # This should be the e2e_filter to avoid running on every push
      #     # filters: *e2e_filter
      #     filters: *feature_filter
      #     context: react-covid-tracker-stage

  ota:
    jobs:
      # Staging OTA deploy
      - ota-release:
          name: 'Stage OTA'
          filters: *develop_filter
          context: react-covid-tracker-stage
      - deployed-ota:
          name: 'Stage OTA Deployed'
          context: slack-ci-covid-mobile
          requires:
            - Stage OTA

      # Production OTA deploy
      - ota-release-approval:
          name: 'Prod OTA approval'
          filters: *master_filter
          type: approval
      - ota-release:
          name: 'Prod OTA'
          filters: *master_filter
          context: react-covid-tracker-prod
          requires:
            - Prod OTA approval
      - deployed-ota:
          name: 'Prod OTA Deployed'
          context: slack-ci-covid-mobile
          requires:
            - Prod OTA
  
  release:
    jobs:
      # Publish app for internal testing
      # - App Center distribution (with approval)
      # |-- iOS / Android Release to App Center
      # |-- Message slack message on App Center upload successful
      - slack/approval-notification:
          filters: *develop_filter
          message: "Awaiting manual approval to deploy native apps to staging"
          context: slack-ci-covid-mobile
      - adhoc-release-approval:
          name: 'Adhoc approval'
          filters: *develop_filter
          type: approval
      - build:
          name: 'Adhoc build'
          filters: *develop_filter
          requires:
            - Adhoc approval
      - deploy-ios:
          name: 'Adhoc iOS'
          filters: *develop_filter
          context: react-covid-tracker-stage
          requires:
            - Adhoc build
      - deploy-android:
          name: 'Adhoc Android'
          filters: *develop_filter
          context: react-covid-tracker-stage
          requires:
            - Adhoc build
      - deployed-stage:
          name: 'Stage apps published'
          context: slack-ci-covid-mobile
          requires:
            - Adhoc iOS
            - Adhoc Android

      # Publish app to store
      # # - App / Store release through AppCenter (with approval)
      # # |-- iOS Release to app store (through AppCenter)
      # # |-- Android Release to play store (through AppCenter)
      # # |-- Message slack message on iOS & Android upload successful
      - slack/approval-notification:
          filters: *master_filter
          message: "Awaiting manual approval to deploy to production (Options: OTA, Store)"
          context: slack-ci-covid-mobile
      - store-release-approval:
          name: 'Store approval'
          filters: *master_filter
          type: approval
      - build:
          filters: *master_filter
          name: 'Store build'
          requires:
            - Store approval
      - deploy-ios:
          name: 'Store iOS'
          filters: *master_filter
          context: react-covid-tracker-prod
          requires:
            - Store build
      - deploy-android:
          name: 'Store Android'
          filters: *master_filter
          context: react-covid-tracker-prod
          requires:
            - Store build
      - deployed-prod:
          name: 'Prod apps published'
          context: slack-ci-covid-mobile
          requires:
            - Store iOS
            - Store Android
